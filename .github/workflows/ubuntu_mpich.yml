name: Ubuntu

on:
  push:
    branches: master
    paths-ignore:
      - '**.md'
      - '**.txt'
      - '**.jpg'
      - '**.png'
  pull_request:
    branches: master
    paths-ignore:
      - '**.md'
      - '**.txt'
      - '**.jpg'
      - '**.png'

jobs:
    build:
      runs-on: ubuntu-latest
      timeout-minutes: 60
      steps:
        - uses: actions/checkout@v2
        - name: Set up dependencies
          run: |
            sudo apt-get update
            sudo apt-get install automake autoconf libtool libtool-bin m4
            # mpi
            sudo apt-get install mpich
            # zlib
            sudo apt-get install zlib1g-dev
        - name: Install PnetCDF
          run: |
            WORKDIR=$(pwd)
            VERSION=1.12.3
            rm -rf pnetcdf-${VERSION}.tar.gz pnetcdf-${VERSION}
            wget -cq https://parallel-netcdf.github.io/Release/pnetcdf-${VERSION}.tar.gz
            tar -zxf pnetcdf-${VERSION}.tar.gz
            cd pnetcdf-${VERSION}
            ./configure --prefix=${WORKDIR}/PnetCDF \
                        --silent \
                        --disable-fortran \
                        --disable-cxx
            make -s LIBTOOLFLAGS=--silent V=1 -j 8 install
            cd ..
        - name: Install HDF5
          if: ${{ success() }}
          run: |
            WORKDIR=$(pwd)
            VERSION=1.13.0
            rm -rf hdf5-${VERSION}.tar.gz hdf5-${VERSION}
            wget -cq https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.13/hdf5-${VERSION}/src/hdf5-${VERSION}.tar.gz
            tar -zxf hdf5-${VERSION}.tar.gz
            cd hdf5-${VERSION}
            ./configure --prefix=${WORKDIR}/HDF5 \
                        --silent \
                        --enable-hl \
                        --enable-parallel \
                        --enable-build-mode=production \
                        --disable-doxygen-doc \
                        --disable-doxygen-man \
                        --disable-doxygen-html \
                        --disable-hltools \
                        --disable-tools \
                        --disable-tests \
                        CC=mpicc
            make -s LIBTOOLFLAGS=--silent V=1 -j 8 install
            cd ..
        - name: Install NetCDF-C
          if: ${{ success() }}
          run: |
            WORKDIR=$(pwd)
            # VERSION=4.9.0
            # rm -rf v${VERSION}.tar.gz netcdf-c-${VERSION}
            # wget -cq https://github.com/Unidata/netcdf-c/archive/refs/tags/v${VERSION}.tar.gz
            # tar -zxf v${VERSION}.tar.gz
            # cd netcdf-c-${VERSION}
            # TODO: Always use an official release. E3SM-IO requires NetCDF-C 4.9.0 or later.
            rm -rf netcdf-c
            git clone -q https://github.com/Unidata/netcdf-c.git
            cd netcdf-c
            autoreconf -i
            ./configure --prefix=${WORKDIR}/NetCDF \
                        --silent \
                        --disable-dap \
                        --disable-nczarr \
                        --disable-nczarr-filters \
                        --disable-filter-testing \
                        CC=mpicc \
                        CPPFLAGS="-I${WORKDIR}/HDF5/include" \
                        LDFLAGS="-L${WORKDIR}/HDF5/lib" \
                        LIBS="-lhdf5"
            make -s LIBTOOLFLAGS=--silent V=1 -j 8 install
            cd ..
        - name: Install ADIOS2
          if: ${{ success() }}
          run: |
            WORKDIR=$(pwd)
            VERSION=2.7.1
            rm -rf v${VERSION}.tar.gz ADIOS2-${VERSION} adios2_build
            wget -cq https://github.com/ornladios/ADIOS2/archive/refs/tags/v${VERSION}.tar.gz
            tar -zxf v${VERSION}.tar.gz
            mkdir adios2_build
            cd adios2_build
            cmake -DCMAKE_INSTALL_PREFIX=${WORKDIR}/ADIOS \
                  -DADIOS2_USE_MPI=ON \
                  -DADIOS2_USE_Fortran=OFF \
                  -DADIOS2_USE_Python=OFF \
                  -DADIOS2_USE_ZeroMQ=OFF \
                  -DADIOS2_USE_HDF5=OFF \
                  -DADIOS2_USE_SST=OFF \
                  -DADIOS2_USE_BZip2=OFF \
                  -DADIOS2_USE_ZFP=OFF \
                  -DADIOS2_USE_SZ=OFF \
                  -DADIOS2_USE_MGARD=OFF \
                  -DADIOS2_USE_PNG=OFF \
                  -DADIOS2_USE_Blosc=OFF \
                  -DADIOS2_BUILD_EXAMPLES=OFF \
                  -DBUILD_TESTING=OFF \
                  ../ADIOS2-${VERSION}
            make -j 8
            make -j 8 install
            cd ..
        - name: Install log VOL
          if: ${{ success() }}
          run: |
            WORKDIR=$(pwd)
            VERSION=1.2.0
            rm -rf logvol.${VERSION}.tar.gz vol-log-based-logvol.${VERSION}
            wget -cq https://github.com/DataLib-ECP/vol-log-based/archive/refs/tags/logvol.${VERSION}.tar.gz
            tar -zxf logvol.${VERSION}.tar.gz
            cd vol-log-based-logvol.${VERSION}
            autoreconf -i
            ./configure --prefix=${WORKDIR}/LOGVOL \
                        --silent \
                        --with-hdf5=${WORKDIR}/HDF5
            make -s LIBTOOLFLAGS=--silent V=1 -j 8 install
            cd ..
        - name: Build E3SM_IO with PnetCDF only
          if: ${{ success() }}
          run: |
            WORKDIR=$(pwd)
            autoreconf -i
            ./configure --with-pnetcdf=${WORKDIR}/PnetCDF \
                        CC=mpicc CXX=mpicxx \
                        CFLAGS=-fno-var-tracking-assignments \
                        CXXFLAGS=-fno-var-tracking-assignments
            make -j 4
            make check
            cat test.sh.log utils/*.log
            make -s distclean
        - name: Build E3SM_IO with PnetCDf + HDF5 only
          if: ${{ success() }}
          run: |
            WORKDIR=$(pwd)
            ./configure --with-pnetcdf=${WORKDIR}/PnetCDF \
                        --with-hdf5=${WORKDIR}/HDF5 \
                        CC=mpicc CXX=mpicxx \
                        CFLAGS=-fno-var-tracking-assignments \
                        CXXFLAGS=-fno-var-tracking-assignments
            make -j 4
            make check
            cat test.sh.log utils/*.log
            make -s distclean
        - name: Build E3SM_IO with PnetCDf + HDF5 log-based VOL only
          if: ${{ success() }}
          run: |
            WORKDIR=$(pwd)
            ./configure --with-pnetcdf=${WORKDIR}/PnetCDF \
                        --with-hdf5=${WORKDIR}/HDF5 \
                        --with-logvol=${WORKDIR}/LOGVOL \
                        CC=mpicc CXX=mpicxx \
                        CFLAGS=-fno-var-tracking-assignments \
                        CXXFLAGS=-fno-var-tracking-assignments
            make -j 4
            make check
            cat test.sh.log utils/*.log
            make -s distclean
        - name: Build E3SM_IO with PnetCDf + NetCDF4 only
          if: ${{ success() }}
          run: |
            WORKDIR=$(pwd)
            ./configure --with-pnetcdf=${WORKDIR}/PnetCDF \
                        --with-netcdf4=${WORKDIR}/NetCDF \
                        CC=mpicc CXX=mpicxx \
                        CFLAGS=-fno-var-tracking-assignments \
                        CXXFLAGS=-fno-var-tracking-assignments
            make -j 4
            make check
            cat test.sh.log utils/*.log
            make -s distclean
        - name: Build E3SM_IO with PnetCDF + ADIOS only
          if: ${{ success() }}
          run: |
            WORKDIR=$(pwd)
            ./configure --with-pnetcdf=${WORKDIR}/PnetCDF \
                        --with-adios2=${WORKDIR}/ADIOS \
                        CC=mpicc CXX=mpicxx \
                        CFLAGS=-fno-var-tracking-assignments \
                        CXXFLAGS=-fno-var-tracking-assignments
            make -j 4
            make check
            cat test.sh.log utils/*.log
            make -s distclean
        - name: Build and test E3SM_IO with all APIs
          if: ${{ success() }}
          run: |
            WORKDIR=$(pwd)
            ./configure --with-pnetcdf=${WORKDIR}/PnetCDF \
                        --with-hdf5=${WORKDIR}/HDF5 \
                        --with-netcdf4=${WORKDIR}/NetCDF \
                        --with-logvol=${WORKDIR}/LOGVOL \
                        --with-adios2=${WORKDIR}/ADIOS \
                        CC=mpicc CXX=mpicxx \
                        CFLAGS=-fno-var-tracking-assignments \
                        CXXFLAGS=-fno-var-tracking-assignments
            make -j 4
        - name: Print config.log
          if: ${{ failure() }}
          run: |
            cat config.log
            cat test.sh.log utils/*.log
        - name: Test E3SM_IO all APIs -- parallel runs
          if: ${{ success() }}
          run: |
            make ptest
        - name: Test make distcheck
          if: ${{ success() }}
          run: |
            WORKDIR=$(pwd)
            make distcheck DISTCHECK_CONFIGURE_FLAGS="--with-pnetcdf=${WORKDIR}/PnetCDF --with-hdf5=${WORKDIR}/HDF5 --with-netcdf4=${WORKDIR}/NetCDF --with-logvol=${WORKDIR}/LOGVOL --with-adios2=${WORKDIR}/ADIOS CC=mpicc CXX=mpicxx CFLAGS=-fno-var-tracking-assignments CXXFLAGS=-fno-var-tracking-assignments"
            make distclean

